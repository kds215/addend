#!/usr/bin/python
# cover.py -- add an autogenerated cover page to a PDF document 

import sys, os, getopt, string, pwd, cgi
from Quartz.CoreGraphics import *
from Quartz.ImageIO import *
from AppKit import *
from WebKit import *
from Foundation import *

## definitions

subject_title = 'Subject:'
from_title = 'From:'
to_title = 'To:'
date_title = 'Date:'
pages_title = 'Sheets to follow:'

subject_text = None
from_name = 'auto'
to_name   = None
date_string = None
pages_string = None

body_file = None
body_string = None
body_type = None

output_file = 'cover.pdf'

page_rect = CGRectMake (0, 0, 612, 792)
page_inset = (72, 72)
default_logo_size = (120, 120)

web_prefs = None
header_font_size = 14

logos = []


## functions
def createPDFDocumentWithPath(path):
	return CGPDFDocumentCreateWithURL(CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, path, len(path), False))

def createImage(imagePath):
	image = None
	provider = CGDataProviderCreateWithFilename(imagePath)
	if provider:
		imageSrc = CGImageSourceCreateWithDataProvider(provider, None)
		if imageSrc:
			image = CGImageSourceCreateImageAtIndex(imageSrc, 0, None)
	if not image:
		print "Cannot import the image from file %s" % imagePath
	return image

def setGraphicsContext(context):
	graphicsContext = None
	if context:
		graphicsContext = NSGraphicsContext.graphicsContextWithGraphicsPort_flipped_(context, True)

	NSGraphicsContext.setCurrentContext_(graphicsContext)

def webPrefsWithFontSize(fontSize):
	global web_prefs

	if web_prefs == None:
		web_prefs = WebPreferences.alloc().init();

		web_prefs.setUserStyleSheetEnabled_(False);
		web_prefs.setJavaEnabled_(False);
		web_prefs.setJavaScriptEnabled_(False);
		web_prefs.setJavaScriptCanOpenWindowsAutomatically_(False);
		web_prefs.setPlugInsEnabled_(False);
		web_prefs.setAllowsAnimatedImages_(False);
		web_prefs.setAllowsAnimatedImageLooping_(False);
		web_prefs.setLoadsImagesAutomatically_(True);
		web_prefs.setAutosaves_(False);

	if fontSize <= 0.0:
		fontSize = 12.0

	web_prefs.setDefaultFontSize_(fontSize);
	web_prefs.setDefaultFixedFontSize_(fontSize);

	return web_prefs;

def CGContextDrawHTMLTextInRect (context, data, rect, fontSize):
	#	Use a frame with the right width (for wrapping), but a ridiculously
	#	small height. This forces WebKit to expand the document frame's
	#	view to the real height of the passed in text. We can then use
	#	that to calculate the actual size of the drawn content.
	ink_rect = NSZeroRect

	view = WebView.alloc().initWithFrame_(NSMakeRect(0, 0, CGRectGetWidth(rect), 1))
	if view:
		view.setPreferences_(webPrefsWithFontSize(fontSize))
		frame = view.mainFrame()
		frame.loadData_MIMEType_textEncodingName_baseURL_(data, u"text/html", None, None)
		
		date = NSDate.dateWithTimeIntervalSinceNow_(10)
		while view.isLoading():
			NSRunLoop.currentRunLoop().runMode_beforeDate_(NSDefaultRunLoopMode, date)
		
		doc_view = frame.frameView().documentView()
		if doc_view:

			if context:
				CGContextSaveGState(context)
				CGContextClipToRect(context, rect)
				CGContextTranslateCTM(context, CGRectGetMinX(rect), CGRectGetMinY(rect))
				CGContextConcatCTM(context, CGAffineTransformMake(1, 0, 0, -1, 0, CGRectGetHeight(rect)))
				setGraphicsContext(context)

			doc_view.drawRect_(NSMakeRect(0, 0, CGRectGetWidth(rect), CGRectGetHeight(rect)))

			if context:
				setGraphicsContext(None)
				CGContextRestoreGState(context)

			#	Calculate the area we drew into.
			ink_rect = NSOffsetRect(doc_view.frame(), CGRectGetMinX(rect), CGRectGetMinY(rect))
			ink_rect = NSIntersectionRect(ink_rect, rect)

		del view
	
	return ink_rect

def CGContextDrawTextInRect(context, data, rect, fontSize, format):
	ink_rect = NSZeroRect

	tx_rect = NSMakeRect(0, 0, CGRectGetWidth(rect), CGRectGetHeight(rect))

	text_view = NSTextView.alloc().initWithFrame_(tx_rect)
	text_view.setRichText_(True)
	text_view.setDrawsBackground_(False)

	text_storage = text_view.textStorage()
	if fontSize > 0.0:
		text_storage.setFont_(NSFont.userFontOfSize_(fontSize))

	text_storage.beginEditing()

	if format:
		formatDict = NSDictionary.dictionaryWithObject_forKey_(format, NSDocumentTypeDocumentOption)
		attr_string = NSAttributedString.alloc().initWithData_options_documentAttributes_error_(data, formatDict, None, None)
		text_storage.setAttributedString_(attr_string)
		del attr_string
	else:
		string = NSString.alloc().initWithBytes_length_encoding_(data, len(data), NSUTF8StringEncoding)
		text_storage.replaceCharactersInRange_withString_(NSMakeRange(0, 0), string)
		del string

	text_storage.endEditing()

	if context:
		CGContextSaveGState(context)
		CGContextTranslateCTM(context, rect.origin.x, rect.origin.y)
		CGContextConcatCTM(context, CGAffineTransformMake(1, 0, 0, -1, 0, CGRectGetHeight(rect)))
		setGraphicsContext(context)

	text_view.drawRect_(tx_rect)

	ink_rect = NSOffsetRect(text_view.layoutManager().boundingRectForGlyphRange_inTextContainer_(NSMakeRange(0, text_storage.length()), text_view.textContainer()), CGRectGetMinX(rect), CGRectGetMinY(rect))

	if context:
		setGraphicsContext(None)
		CGContextRestoreGState(context)

	del text_view

	return ink_rect

def CGContextDrawRTFTextInRect(context, data, rect, fontSize):
	return CGContextDrawTextInRect(context, data, rect, fontSize, NSRTFTextDocumentType)

#def CGContextDrawHTMLTextInRect(context, data, rect, fontSize):
#	return CGContextDrawTextInRect(context, data, rect, fontSize, NSHTMLTextDocumentType)

def CGContextDrawPlainTextInRect(context, data, rect, fontSize):
	return CGContextDrawTextInRect(context, data, rect, fontSize, None)

def body (c, rect):
	#	The logo image or images
	for (f, r) in logos:
		image = createImage(f)
		if image:
			CGContextDrawImage(c, r, image)

	#	The header
	html = make_header_html()
	tr = CGContextDrawHTMLTextInRect(c, NSData.dataWithBytes_length_(html, len(html)), rect, header_font_size)

	#	The body, whose position is related to the header
	global body_type

	#	Adjust body height according to header size 
	rect.size.height -= CGRectGetHeight(tr)

	data = None
	if body_file:
		with open(body_file, 'rb') as f:
			data = f.read()
		if not body_type:
			bits = string.split (body_file, '.')
			if len (bits) > 1:
				suff = string.lower (bits[-1])
				if suff == 'rtf':
					body_type = 'rtf'
				elif suff == 'html' or suff == 'htm':
					body_type = 'html'
	elif body_string:
		data = body_string

	if data:
		fontSize = 12
		if body_type == 'rtf':
			CGContextDrawRTFTextInRect(c, data, rect, fontSize)
		elif body_type == 'html':
			CGContextDrawHTMLTextInRect(c, data, rect, fontSize)
		else:
			CGContextDrawPlainTextInRect (c, data, rect, fontSize)

# Encoding the header section as HTML is the easiest way to get nice
# alignment of the two columns

def make_header_html ():
  global date_string, from_name

  def make_row (title, body, format=None):
    f = ''; F = ''
    if format:
      f = '<%(format)s>' % vars ()
      F = '</%(format)s>' % vars ()
    body = cgi.escape(body, True);
    return ('<tr><td valign=top align=right>%(title)s</td>'
	    '<td>%(f)s%(body)s%(F)s</td></tr>\n' % vars())

  if date_string == 'now':
  	localizedDate = NSDateFormatter.localizedStringFromDate_dateStyle_timeStyle_(NSDate.date(), NSDateFormatterLongStyle, NSDateFormatterLongStyle)
	date_string = localizedDate.encode("utf-8")
	
    #f = os.popen ('date')
    ## read the date, dropping the trailing newline
    #date_string = f.read () [:-1]
    #f.close ()

  if from_name == 'auto':
    p = pwd.getpwuid (os.getuid ())
    from_name = p and p[4];
    
  pagesNumber = int(pages_string)
  pagesNumberStr = NSString.localizedStringWithFormat_("%d", pagesNumber) 
  pages_string_loc = pagesNumberStr.encode("utf-8")

  return ('<html>\n'
	  + '<head><meta http-equiv=Content-Type content="text/html; charset=UTF-8"></head>\n'
	  + '<body text=\"#000000\">\n<table>\n'
	  + (to_name and make_row (to_title, to_name) or '')
	  + (from_name and make_row (from_title, from_name) or '')
	  + (date_string and make_row (date_title, date_string) or '')
	  + (subject_text and make_row (subject_title, subject_text, 'b') or '')
	  + (pages_string_loc and make_row (pages_title, pages_string_loc) or '')
	  + '</table>\n</body>\n</html>')


## entry point

def usage ():
  print '''
usage: python cover.py [OPTION]... PDF-FILES...

Add a cover page to one or more PDF documents.

  -f, --from=STRING
  -F, --from-title=STRING
  -t, --to=STRING
  -T, --to-title=STRING
  -s, --subject=STRING
  -S, --subject-title=STRING
  -d, --date=STRING            (use STRING='now' for current date)
  -D, --date-title=STRING
  -n, --count=STRING
  -N, --count-title=STRING
  -b, --body=STRING
  -B, --body-file=FILENAME
  -Y, --body-type=TYPE
  -p, --page-rect=X,Y,W,H
  -o, --output=FILENAME
  -l, --logo=FILENAME[@X,Y,W,H]
  -H, --header-font-size=SIZE
'''

def main ():
	global subject_title, from_title, to_title, pages_title, date_title
	global subject_text, from_name, to_name, pages_string, body_file, body_string
	global body_type, output_file, page_rect, date_string, logos
	global header_font_size

	def parse_rect (s):
		a = string.split (s, ',')
		return (CGRectMake (float (a[0]), float (a[1]), float (a[2]), float (a[3])))

	try:
		opts,args = getopt.getopt (sys.argv[1:],
			       'f:F:t:T:s:S:b:B:T:p:o:l:d:D:n:N:',
			       ['from=', 'from-title=', 'to=', 'to-title=',
				'subject=', 'subject-title=', 'body=',
				'body-file=', 'body-type=', 'page-rect=',
				'output=', 'logo=', 'date=', 'date-title=',
				'count=', 'count-title=', 'header-font-size='])
	except getopt.GetoptError:
		usage ()
		sys.exit (1)
	for o,a in opts:
		if o in ('-f', '--from'):
			from_name = a
		if o in ('-F', '--from-title'):
			from_title = a
		elif o in ('-t', '--to'):
			to_name = a
		elif o in ('-T', '--to-title'):
			to_title = a
		elif o in ('-s', '--subject'):
			subject_text = a
		elif o in ('-S', '--subject-title'):
			subject_title = a
		elif o in ('-b', '--body'):
			body_string = a
		elif o in ('-B', '--body-file'):
			body_file = a
		elif o in ('-Y', '--body-type'):
			body_type = a
		elif o in ('-p', '--page-rect'):
			page_rect = parse_rect (a)
		elif o in ('-o', '--output'):
			output_file = a
		elif o in ('-l', '--logo'):
			a = string.split (a, '@')
			if len (a) > 1:
				r = parse_rect (a[1])
			else:
				r = CGRectMake (page_rect.origin.x + page_rect.size.width - page_inset[0] - default_logo_size[0],
						page_rect.origin.y + page_rect.size.height - page_inset[1] - default_logo_size[1],
						default_logo_size[0], default_logo_size[1])
			logos = logos + [(a[0], r)]
		elif o in ('-d', '--date'):
			date_string = a
		elif o in ('-D', '--date-title'):
			date_title = a
		elif o in ('-n', '--count'):
			pages_string = a
		elif o in ('-N', '--count-title'):
			pages_title = a
		elif o in ('-H', '--header-font-size'):
			header_font_size = float (a)

	c = CGPDFContextCreateWithURL(CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, output_file, len(output_file), False), None, None)
	if c:
		CGContextBeginPage(c, page_rect);

		body (c, CGRectInset(page_rect, page_inset[0], page_inset[1]))
	
		CGContextEndPage(c)

		for f in args:
			pdf = createPDFDocumentWithPath(f);
			if pdf:
				for pageNum in range (1, CGPDFDocumentGetNumberOfPages(pdf) + 1):
					page = CGPDFDocumentGetPage(pdf, pageNum)
					if page:
						rect = CGPDFPageGetBoxRect(page, kCGPDFMediaBox)
						if CGRectIsEmpty(rect):
							rect = None
							
						CGContextBeginPage(c, rect)
						CGContextDrawPDFPage(c, page)
						CGContextEndPage(c)
				del pdf

		CGPDFContextClose(c)
		del c


if __name__ == '__main__':
  main ()
